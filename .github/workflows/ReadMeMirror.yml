name: Mirror README to Discord (edit if exists, fallback)

on:
  push:
    paths:
      - "README.md"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  mirror:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Read README
        id: read
        run: |
          if [ ! -f README.md ]; then
            echo "README.md not found" >&2
            exit 1
          fi
          # escape triple backticks
          ESCAPED=$(sed 's/```/`窶義窶義/g' README.md)
          echo "content<<EOF" >> "$GITHUB_OUTPUT"
          echo "$ESCAPED" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          LENGTH=$(wc -c < README.md)
          echo "length=$LENGTH" >> "$GITHUB_OUTPUT"

      - name: Parse webhook parts
        id: wb
        run: |
          FULL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          WEBHOOK_ID=$(echo "$FULL" | awk -F'/' '{print $(NF-1)}')
          WEBHOOK_TOKEN=$(echo "$FULL" | awk -F'/' '{print $NF}')
          echo "id=$WEBHOOK_ID" >> "$GITHUB_OUTPUT"
          echo "token=$WEBHOOK_TOKEN" >> "$GITHUB_OUTPUT"

      - name: Load existing message ID
        id: load
        run: |
          if [ -f .discord_message_id ]; then
            MSGID=$(cat .discord_message_id)
            echo "msgid=$MSGID" >> "$GITHUB_OUTPUT"
          else
            echo "msgid=" >> "$GITHUB_OUTPUT"
          fi

      - name: Post header-sectioned messages
        id: discord
        run: |
          set -euo pipefail

          BASE="https://discord.com/api/webhooks/${{ steps.wb.outputs.id }}/${{ steps.wb.outputs.token }}"

          # Delete previous messages
          if [ -f .discord_message_ids ]; then
            echo "Deleting previous Discord messages..."
            while IFS= read -r MSGID; do
              if [ -n "$MSGID" ]; then
                echo "Deleting message $MSGID"
                curl -s -X DELETE "$BASE/messages/$MSGID" || true
              fi
            done < .discord_message_ids
          fi

          if [ ! -f README.md ]; then
            echo "ERROR: README.md not found!" >&2
            exit 2
          fi

          # Split README by top-level headers using safe method
          SECTIONS_FILE=$(mktemp)
          awk '
            BEGIN { section = "" }
            /^# [^#]/ {
              if (section != "") print section
              section = $0
              next
            }
            {
              if (section == "") section = $0
              else section = section "\n" $0
            }
            END { if (section != "") print section }
          ' README.md > "$SECTIONS_FILE"

          # Count sections
          NUM_SECTIONS=$(wc -l < "$SECTIONS_FILE")
          echo "Split README into $NUM_SECTIONS sections."

          NEW_IDS=()
          while IFS= read -r -d '' SECTION; do
            # Skip if empty or whitespace
            if [ -z "$(printf '%s' "$SECTION" | tr -d '[:space:]')" ]; then
              continue
            fi

            # Escape triple backticks
            ESCAPED=$(printf '%s' "$SECTION" | sed 's/```/`窶義窶義/g')

            # Build JSON safely
            printf '%s' "$ESCAPED" > /tmp/discord_section.txt
            JSON=$(jq -c --rawfile c /tmp/discord_section.txt '{ content: "```\($c)```" }')

            # Debug: safe length print (NO content interpolation)
            LEN=$(printf '%s' "$ESCAPED" | wc -c)
            echo "Posting section (length: $LEN)..."

            RESP=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -d "$JSON" \
              "${BASE}?wait=true")

            NEWID=$(echo "$RESP" | jq -r '.id // empty')
            if [ -z "$NEWID" ]; then
              echo "ERROR: Failed to post section. Response: $RESP" >&2
              echo "Section content (first 200 chars):"
              printf '%s' "$SECTION" | cut -c1-200
              exit 11
            fi
            NEW_IDS+=("$NEWID")
          done < <(awk '{print}' ORS='\0' "$SECTIONS_FILE")

          printf "%s\n" "${NEW_IDS[@]}" > .discord_message_ids
          echo "new_msgids=$(IFS=,; echo "${NEW_IDS[*]}")" >> "$GITHUB_OUTPUT"

          echo "All sections posted successfully!"

      - name: Commit .discord_message_ids if changed
        if: steps.discord.outputs.new_msgids != ''
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add .discord_message_ids
          git commit -m "Update Discord message IDs" || echo "Nothing to commit"
          git push
