name: Mirror README to Discord (edit if exists, fallback)

on:
  push:
    paths:
      - "README.md"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  mirror:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Read README
        id: read
        run: |
          if [ ! -f README.md ]; then
            echo "README.md not found" >&2
            exit 1
          fi
          # escape triple backticks
          ESCAPED=$(sed 's/```/`窶義窶義/g' README.md)
          echo "content<<EOF" >> "$GITHUB_OUTPUT"
          echo "$ESCAPED" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          LENGTH=$(wc -c < README.md)
          echo "length=$LENGTH" >> "$GITHUB_OUTPUT"

      - name: Parse webhook parts
        id: wb
        run: |
          FULL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          WEBHOOK_ID=$(echo "$FULL" | awk -F'/' '{print $(NF-1)}')
          WEBHOOK_TOKEN=$(echo "$FULL" | awk -F'/' '{print $NF}')
          echo "id=$WEBHOOK_ID" >> "$GITHUB_OUTPUT"
          echo "token=$WEBHOOK_TOKEN" >> "$GITHUB_OUTPUT"

      - name: Load existing message ID
        id: load
        run: |
          if [ -f .discord_message_id ]; then
            MSGID=$(cat .discord_message_id)
            echo "msgid=$MSGID" >> "$GITHUB_OUTPUT"
          else
            echo "msgid=" >> "$GITHUB_OUTPUT"
          fi

      - name: Post header-sectioned messages
        id: discord
        run: |
          set -euo pipefail
          
          BASE="https://discord.com/api/webhooks/${{ steps.wb.outputs.id }}/${{ steps.wb.outputs.token }}"
          
          # Load old message IDs and delete them
          if [ -f .discord_message_ids ]; then
            echo "Deleting previous Discord messages..."
            while IFS= read -r MSGID; do
              if [ -n "$MSGID" ]; then
                echo "Deleting message $MSGID"
                curl -s -X DELETE "$BASE/messages/$MSGID" || true
              fi
            done < .discord_message_ids
          fi
          
          # Read README safely
          if [ ! -f README.md ]; then
            echo "ERROR: README.md not found!"
            exit 2
          fi
          CONTENT=$(cat README.md)
          
          # Split README by top-level headers: lines starting with "# "
          # This uses awk to group content under each "# Header"
          mapfile -t SECTIONS < <(
            awk '
              BEGIN { section = "" }
              /^# / {
                if (section != "") print section
                section = $0
                next
              }
              { 
                if (section != "") section = section "\n" $0
                else section = $0  # in case file doesn't start with #
              }
              END { if (section != "") print section }
            ' README.md
          )
          
          echo "Split README into ${#SECTIONS[@]} header sections."
          
          NEW_IDS=()
          for SECTION in "${SECTIONS[@]}"; do
            # Skip empty or whitespace-only sections
            TRIMMED=$(echo "$SECTION" | tr -d '[:space:]')
            if [ -z "$TRIMMED" ]; then
              continue
            fi
            
            # Escape triple backticks to prevent breaking Discord code blocks
            ESCAPED=$(echo "$SECTION" | sed 's/```/`窶義窶義/g')
            
            # Wrap in code block for formatting
            JSON=$(jq -c -n --arg c "```${ESCAPED}```" '{ content: $c }')
            
            echo "Posting section (length: ${#ESCAPED})..."
            echo "Preview:"
            echo "$SECTION" | head -n 3 | sed 's/^/  /'
            
            RESP=$(curl -s -X POST \
              -H "Content-Type: application/json" \
              -d "$JSON" \
              "${BASE}?wait=true")
              
            echo "Discord POST response: $RESP"
            NEWID=$(echo "$RESP" | jq -r '.id // empty')
            if [ -z "$NEWID" ]; then
              echo "ERROR: Failed to post section. Response: $RESP"
              exit 11
            fi
            NEW_IDS+=("$NEWID")
          done
          
          # Save new message IDs
          printf "%s\n" "${NEW_IDS[@]}" > .discord_message_ids
          echo "new_msgids=$(IFS=,; echo "${NEW_IDS[*]}")" >> "$GITHUB_OUTPUT"
          
          echo "All sections posted successfully!"

      - name: Commit .discord_message_ids if changed
        if: steps.discord.outputs.new_msgids != ''
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add .discord_message_ids
          git commit -m "Update Discord message IDs" || echo "Nothing to commit"
          git push
