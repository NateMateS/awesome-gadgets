name: Mirror README to Discord (edit if exists, fallback)

on:
  push:
    paths:
      - "README.md"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  mirror:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Read README
        id: read
        run: |
          if [ ! -f README.md ]; then
            echo "README.md not found" >&2
            exit 1
          fi
          # escape triple backticks
          ESCAPED=$(sed 's/```/`​`​`/g' README.md)
          echo "content<<EOF" >> "$GITHUB_OUTPUT"
          echo "$ESCAPED" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          LENGTH=$(wc -c < README.md)
          echo "length=$LENGTH" >> "$GITHUB_OUTPUT"

      - name: Parse webhook parts
        id: wb
        run: |
          FULL="${{ secrets.DISCORD_WEBHOOK_URL }}"
          WEBHOOK_ID=$(echo "$FULL" | awk -F'/' '{print $(NF-1)}')
          WEBHOOK_TOKEN=$(echo "$FULL" | awk -F'/' '{print $NF}')
          echo "id=$WEBHOOK_ID" >> "$GITHUB_OUTPUT"
          echo "token=$WEBHOOK_TOKEN" >> "$GITHUB_OUTPUT"

      - name: Load existing message ID
        id: load
        run: |
          if [ -f .discord_message_id ]; then
            MSGID=$(cat .discord_message_id)
            echo "msgid=$MSGID" >> "$GITHUB_OUTPUT"
          else
            echo "msgid=" >> "$GITHUB_OUTPUT"
          fi

      - name: Post or patch messages (chunked)
        id: discord
        run: |
          set -e
          BASE="https://discord.com/api/webhooks/${{ steps.wb.outputs.id }}/${{ steps.wb.outputs.token }}"
          OLD_IDS=""
          if [ -f .discord_message_ids ]; then
            OLD_IDS=$(cat .discord_message_ids)
          fi

          # Split README.md into 1900-char chunks, preserving lines
          CHUNKS=()
          CHUNK=""
          while IFS= read -r LINE; do
            if [ $(( ${#CHUNK} + ${#LINE} + 1 )) -ge 1900 ]; then
              CHUNKS+=("$CHUNK")
              CHUNK="$LINE"
            else
              if [ -z "$CHUNK" ]; then
                CHUNK="$LINE"
              else
                CHUNK="$CHUNK"$'\n'"$LINE"
              fi
            fi
          done < README.md
          # Add last chunk
          if [ -n "$CHUNK" ]; then
            CHUNKS+=("$CHUNK")
          fi

          # Loop through chunks and post/patch as needed
          NEW_IDS=()
          OLD_IDS_ARR=()
          IFS=$'\n' read -d '' -r -a OLD_IDS_ARR <<< "$OLD_IDS"
          NUM_CHUNKS=${#CHUNKS[@]}
          NUM_OLD=${#OLD_IDS_ARR[@]}

          for IDX in $(seq 0 $((NUM_CHUNKS-1))); do
            CHUNK="${CHUNKS[$IDX]}"
            # Wrap in triple backticks for code formatting
            JSON=$(jq -n --arg c "```${CHUNK}```" '{ content: $c }')
            if [ $IDX -lt $NUM_OLD ] && [ -n "${OLD_IDS_ARR[$IDX]}" ]; then
              MSGID="${OLD_IDS_ARR[$IDX]}"
              # PATCH existing message
              RESP=$(curl -s -X PATCH \
                -H "Content-Type: application/json" \
                -d "$JSON" \
                "$BASE/messages/$MSGID")
              NEWID=$(echo "$RESP" | jq -r '.id // empty')
              if [ -n "$NEWID" ]; then
                NEW_IDS+=("$NEWID")
              else
                # PATCH failed, POST as new
                RESP=$(curl -s -X POST \
                  -H "Content-Type: application/json" \
                  -d "$JSON" \
                  "${BASE}?wait=true")
                NEWID=$(echo "$RESP" | jq -r '.id // empty')
                NEW_IDS+=("$NEWID")
              fi
            else
              # POST new message
              RESP=$(curl -s -X POST \
                -H "Content-Type: application/json" \
                -d "$JSON" \
                "${BASE}?wait=true")
              NEWID=$(echo "$RESP" | jq -r '.id // empty')
              NEW_IDS+=("$NEWID")
            fi
          done

          # Delete any extra old messages (if README shrank)
          if [ $NUM_OLD -gt $NUM_CHUNKS ]; then
            for IDX in $(seq $NUM_CHUNKS $((NUM_OLD-1))); do
              MSGID="${OLD_IDS_ARR[$IDX]}"
              curl -s -X DELETE "$BASE/messages/$MSGID"
            done
          fi

          # Save new IDs
          printf "%s\n" "${NEW_IDS[@]}" > .discord_message_ids
          echo "new_msgids=$(IFS=,; echo "${NEW_IDS[*]}")" >> "$GITHUB_OUTPUT"

      - name: Commit .discord_message_ids if changed
        if: steps.discord.outputs.new_msgids != ''
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add .discord_message_ids
          git commit -m "Update Discord message IDs" || echo "Nothing to commit"
          git push
